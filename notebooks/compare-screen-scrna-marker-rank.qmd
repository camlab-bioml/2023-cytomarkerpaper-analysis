---
title: "Full single-cell analysis"
format: html
params:
  cell_type: B
---

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(SingleCellExperiment)
  library(readxl)
  library(Nebulosa)
  library(ComplexHeatmap)
  library(here)
  library(singleCellTK)
  library(ggrepel)
  library(ggpubr)
  library(zellkonverter)
  library(stringr)
  library(glue)
  library(scran)
  library(scater)
})
```

```{r}
screen_scrna_ct_map <- read_excel(here("data/screen-scrna-celltype-match.xlsx"))
screen_scrna_ct_map <- filter(screen_scrna_ct_map, 
                              cell_type == params$cell_type)
stopifnot(nrow(screen_scrna_ct_map) == 1)
```


```{r}
sce <- readRDS(here("data/sce_screen_subsample.rds"))
```

```{r}
reducedDim(sce,'UMAP') <- reducedDim(sce, 'seuratUMAP')
```



```{r}
sce_full <- readRDS(here("data/sce_screen_full.rds"))
```

Read in cell type interpretation:

```{r}
cluster_interpretation <- read_excel(here("data/cluster-interpretation-nov23.xlsx"))
```

```{r}
sce_full$cell_type <- plyr::mapvalues(sce_full$predicted_label,
                                      cluster_interpretation$cluster,
                                      cluster_interpretation$label)
```



```{r}

dfsc <- colData(sce_full) |> 
  as.data.frame() |> 
         select(expression = Nd148Di,
                cluster = predicted_label,
                cell_type,
         target) |> 
  as_tibble() 

dfsc <- filter(dfsc, !is.na(target))

```

```{r}
dfsum <- group_by(dfsc, target, cell_type) |> 
  summarize(expr_mean = mean(log1p(expression)),
            expr_sd = sd(log1p(expression))) |> 
  ungroup()
```


# Contrast this to scRNA-seq PBMC data

First map the screen to gene names

```{r}
mapping <- read_excel(here("data/aliasmatch_kieranreview-annots.xlsx"))
```

Need to clear this up:

```{r}
mapping <- mutate(mapping, gene_symbol = case_when(
  !is.na(Corrected) ~ Corrected,
  Alias != "NA" ~ Alias,
  input_in_sce ~ Input
))
```



```{r}
sce <- readH5AD(here("data/tabula_sapiens_blood_10ksubsample.h5ad"))
assay(sce, 'logcounts') <- assay(sce, 'X')
assay(sce, 'X') <- NULL
```

## Pull off a specific cell type



```{r}
df_ct <- filter(dfsum, cell_type == params$cell_type)

df_ct$gene_symbol <- plyr::mapvalues(
  from = str_to_upper(mapping$Input), 
  to = str_to_upper(mapping$gene_symbol),
  str_to_upper(df_ct$target)
)

ggplot(df_ct, aes(x = expr_mean, y = expr_sd)) +
  geom_point() +
  geom_label_repel(aes(label = gene_symbol), data = filter(df_ct, expr_sd > 1)) +
  geom_label_repel(aes(label = gene_symbol), data = filter(df_ct, expr_sd < 0.5, expr_mean > 4)) +
  theme_pubclean() +
  labs(x = "Mean expression", y = "Variance expression")
```

```{r}
top_var_screen <- top_n(df_ct, 20, expr_sd) |> 
  pull("gene_symbol") |> 
  unique()

bottom_var_screen <- filter(df_ct, expr_mean > median(expr_mean)) |> 
  top_n(20, -expr_sd) |> 
  pull("gene_symbol") |> 
  unique()
# top_var_screen <- filter(df_ct, expr_sd >1) |> pull('gene_symbol')
# bottom_var_screen <- filter(df_ct, expr_sd < 0.5, expr_mean > 4) |> pull('gene_symbol')
```

```{r}
sce_ct <- sce[, grepl(screen_scrna_ct_map$str_grep, sce$cell_ontology_class)]
```


```{r}
sce_ct <- sce_ct[!duplicated(rowData(sce_ct)$feature_name),]
rownames(sce_ct) <- rowData(sce_ct)$feature_name
```

```{r}
sce_ct <- runUMAP(sce_ct)
plot_density(sce_ct, features = c("CD3D", "CD4", "CD8A", "MS4A1"))
```
```{r}
sce_ct <- singleCellTK::runSeuratScaleData(sce_ct, useAssay = 'logcounts')
sce_ct <- singleCellTK::runSeuratPCA(sce_ct)
sce_ct <- singleCellTK::runSeuratFindClusters(sce_ct)
```
```{r}
plotUMAP(sce_ct, colour_by = "Seurat_louvain_Resolution0.8")
```

```{r}
sce_expr <- sce_ct[rowSums(logcounts(sce_ct)) > 1, ]
fm <- findMarkers(sce_expr, sce_expr$Seurat_louvain_Resolution0.8)
```


We want ranks for 3 different scenarios:

1. Top markers from the screen (highest variance)
2. Random set of markers from the screen (to account for bias in how they were icked)
3. Random set of markers

For (1):
```{r}
mrkr_rank <- sapply(fm, function(f) match(top_var_screen, rownames(f)))
mr <- data.frame(mrkr_rank)# , row.names = top_var_screen)
mr <- drop_na(mr)
```

For (2):

```{r}
random_genes <- sample(rownames(sce_expr), length(top_var_screen))
rank_random <- sapply(fm, function(f) match(random_genes, rownames(f)))
mr_random <- data.frame(rank_random)# , row.names = random_genes)
mr_random <- drop_na(mr_random)
```

For (3):

```{r}
random_screen_genes <- sample(unique(df_ct$gene_symbol), length(top_var_screen))
rank_random_screen <- sapply(fm, function(f) match(random_screen_genes, rownames(f)))
mr_random_screen <- data.frame(rank_random_screen) #, row.names = random_screen_genes)
mr_random_screen <- drop_na(mr_random_screen)
```

```{r}
dfall <- bind_rows(
  mutate(mr, what = 'Gene shows high\nsubcluster variability\nin CyTOF screen'),
  mutate(mr_random_screen, what = 'Random\ngene set\n(screen)'),
  mutate(mr_random, what = 'Random\ngene set\n(all scRNA)')
) |> 
  as_tibble()
```


```{r}
dfall <- gather(dfall, cluster, rank, -what) 

dfall |> 
  ggplot(aes(x = cluster, fill = what, y = rank)) +
  geom_violin() 
```
```{r}
cols <- c('Gene shows high\nsubcluster variability\nin CyTOF screen'='darkred',
          'Random\ngene set\n(screen)' = '#AEC6CF',
          'Random\ngene set\n(all scRNA)' = 'grey80')

dfall2 <- dfall %>%
  mutate(what = factor(what, levels = names(cols))) %>%
  group_by(cluster) |> 
  arrange(what, rank) %>%
  mutate(ordered_rank = row_number()) 

group_by(dfall2, cluster, what) |> 
  # mutate(x = rank(rank)) |> 
  mutate(cluster = gsub("X", paste(params$cell_type, "sub-cluster "), cluster)) |> 
  ggplot(aes(x = ordered_rank, y = rank)) +
  geom_point(aes(color = what)) +
  facet_wrap(~ cluster) +
  scale_y_log10() +
  cowplot::theme_cowplot() +
  # theme_pubclean() +
  labs(x = "Gene",
       y = "Gene rank as cluster marker in scRNA-seq") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        strip.background = element_rect(fill = 'white'),
        legend.title = element_blank()) +
  scale_color_manual(values = cols) +
  theme(legend.position = 'bottom')
```



```{r}
ggsave(here(glue("figs/{params$cell_type}-screen-vs-scrna.pdf")), width=6, height=5)
```




