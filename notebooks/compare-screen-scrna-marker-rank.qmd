---
title: "Full single-cell analysis"
format: html
params:
  cell_type: B
---

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(SingleCellExperiment)
  library(readxl)
  library(Nebulosa)
  library(ComplexHeatmap)
  library(here)
  library(singleCellTK)
  library(ggrepel)
  library(ggpubr)
  library(zellkonverter)
  library(stringr)
  library(glue)
  library(scran)
  library(scater)
})
```

```{r}
set.seed(1234L)
```


# Read in relevant data

```{r}
screen_scrna_ct_map <- read_excel(here("data/screen-scrna-celltype-match.xlsx"))
# screen_scrna_ct_map <- filter(screen_scrna_ct_map, 
                              # cell_type == params$cell_type)
# stopifnot(nrow(screen_scrna_ct_map) == 1)
```


```{r}
sce <- readRDS(here("data/sce_screen_subsample.rds"))
cluster_interpretation <- read_excel(here("data/cluster-interpretation-nov23.xlsx"))

```

# Make screen and single-cell UMAPs

```{r}
reducedDim(sce,'UMAP') <- reducedDim(sce, 'seuratUMAP')
```

```{r}
sce$cell_type <- plyr::mapvalues(sce$Seurat_louvain_Resolution0.5,
                                      cluster_interpretation$cluster,
                                      cluster_interpretation$label)
```


```{r}
plotUMAP(sce, colour_by = "cell_type")
```

```{r}
plot_density(sce, features = c("CD3", "CD4", "CD20", "CD68", "CD56", "CD8", "CD11b"))
```



```{r}
sce_full <- readRDS(here("data/sce_screen_full.rds"))
```


```{r}
sce_full$cell_type <- plyr::mapvalues(sce_full$predicted_label,
                                      cluster_interpretation$cluster,
                                      cluster_interpretation$label)
```



```{r}

dfsc <- colData(sce_full) |> 
  as.data.frame() |> 
         select(expression = Nd148Di,
                cluster = predicted_label,
                cell_type,
         target) |> 
  as_tibble() 

dfsc <- filter(dfsc, !is.na(target))

```

```{r}
dfsum <- group_by(dfsc, target, cell_type) |> 
  summarize(expr_mean = mean(log1p(expression)),
            expr_sd = sd(log1p(expression))) |> 
  ungroup()
```

Save cell metadata:

```{r}
colData(sce_full) |> 
  as.data.frame() |> 
  rownames_to_column('cell_id') |> 
  write_tsv(here("data/cell_metadata_annotated.tsv"))
```


# Contrast this to scRNA-seq PBMC data

First map the screen to gene names

```{r}
mapping <- read_excel(here("data/aliasmatch_kieranreview-annots.xlsx"))
```

Need to clear this up:

```{r}
mapping <- mutate(mapping, gene_symbol = case_when(
  !is.na(Corrected) ~ Corrected,
  Alias != "NA" ~ Alias,
  input_in_sce ~ Input
))
```



```{r}
sce <- readH5AD(here("data/tabula_sapiens_blood_10ksubsample.h5ad"))
assay(sce, 'logcounts') <- assay(sce, 'X')
assay(sce, 'X') <- NULL
```

## Pull off a specific cell type



```{r}
df_ct <- dfsum# filter(dfsum, cell_type == params$cell_type)

df_ct$gene_symbol <- plyr::mapvalues(
  from = str_to_upper(mapping$Input), 
  to = str_to_upper(mapping$gene_symbol),
  str_to_upper(df_ct$target)
)

ggplot(df_ct, aes(x = expr_mean, y = expr_sd)) +
  geom_point() +
  geom_label_repel(aes(label = gene_symbol), data = filter(df_ct, expr_sd > 1)) +
  geom_label_repel(aes(label = gene_symbol), data = filter(df_ct, expr_sd < 0.5, expr_mean > 4)) +
  theme_pubclean() +
  labs(x = "Mean expression", y = "Variance expression") +
  facet_wrap(~cell_type)
```

```{r}
N_TOP_VAR <- 20

top_var_screen <- group_by(df_ct, cell_type) |> 
  top_n(N_TOP_VAR, expr_sd) |> 
  distinct()

bottom_var_screen <- group_by(df_ct, cell_type) |> 
  filter(expr_mean > median(expr_mean)) |> 
  top_n(N_TOP_VAR, -expr_sd)

# top_var_screen <- filter(df_ct, expr_sd >1) |> pull('gene_symbol')
# bottom_var_screen <- filter(df_ct, expr_sd < 0.5, expr_mean > 4) |> pull('gene_symbol')
```

```{r}
# Pull out cell types we have matching equivalent populations in the screen for
sce_ct <- sce[, grepl(paste0(screen_scrna_ct_map$str_grep, collapse = "|"), sce$cell_ontology_class)]
```

Let's map in the consensus cell type

```{r}
sce_ct$major_cell_type <- NULL

for(i in 1:nrow(screen_scrna_ct_map)) {
  cell_type <- screen_scrna_ct_map$cell_type[i]
  str_grep <- screen_scrna_ct_map$str_grep[i]
  sce_ct$major_cell_type[grepl(str_grep, sce_ct$cell_ontology_class)] <- cell_type
}
```



```{r}
sce_ct <- sce_ct[!duplicated(rowData(sce_ct)$feature_name),]
rownames(sce_ct) <- rowData(sce_ct)$feature_name
```

```{r}
sce_ct <- runUMAP(sce_ct)
plot_density(sce_ct, features = c("CD3D", "CD4", "CD8A", "MS4A1"))
```

```{r}
plotUMAP(sce_ct, colour_by = "cell_ontology_class")
```


```{r}
# sce_ct <- singleCellTK::runSeuratScaleData(sce_ct, useAssay = 'logcounts')
# sce_ct <- singleCellTK::runSeuratPCA(sce_ct)
# sce_ct <- singleCellTK::runSeuratFindClusters(sce_ct)
```
```{r}
# plotUMAP(sce_ct, colour_by = "Seurat_louvain_Resolution0.8")
```
```{r}
sces <- lapply(screen_scrna_ct_map$cell_type, function(ct) {
  print(ct)
  sce_expr <- sce_ct[, sce_ct$major_cell_type == ct]
  sce_expr <- sce_expr[rowSums(logcounts(sce_expr)) > 1, ]
  sce_expr <- singleCellTK::runSeuratScaleData(sce_expr, useAssay = 'logcounts')
  sce_expr <- singleCellTK::runSeuratPCA(sce_expr)
  sce_expr <- singleCellTK::runSeuratFindClusters(sce_expr)
  sce_expr
})

names(sces) <- screen_scrna_ct_map$cell_type
```



```{r}
# sce_expr <- sce_ct[rowSums(logcounts(sce_ct)) > 1, ]
fms <- lapply(sces, function(sce) { findMarkers(sce, sce$Seurat_louvain_Resolution0.8)})
```


We want ranks for 3 different scenarios:

1. Top markers from the screen (highest variance)
2. Random set of markers from the screen (to account for bias in how they were icked)
3. Random set of markers

For (1):
```{r}
mrkr_rank <- lapply(screen_scrna_ct_map$cell_type, function(ct) {
  fm <- fms[[ct]]
  most_var_genes <- filter(top_var_screen, cell_type == ct) |> 
    pull('gene_symbol')
  most_var_genes <- most_var_genes[!is.na(most_var_genes)]
  
  mrkr_rank <- sapply(fm, function(f) match(most_var_genes, rownames(f)))
  mr <- data.frame(mrkr_rank)# , row.names = top_var_screen)
  mr <- drop_na(mr)
  mr <- unlist(mr)
  
  tibble(
    what = 'Gene shows high\nsubcluster variability\nin CyTOF screen',
    rank = mr,
    cell_type = ct
  )
}) |> 
  bind_rows()
```

For (2):

```{r}
mr_random_screen <- lapply(screen_scrna_ct_map$cell_type, function(ct) {
  fm <- fms[[ct]]
  random_screen_genes <- sample(unique(df_ct$gene_symbol), N_TOP_VAR)
  rank_random_screen <- sapply(fm, function(f) match(random_screen_genes, rownames(f)))
  
  mr <- data.frame(rank_random_screen)# , row.names = top_var_screen)
  mr <- drop_na(mr)
  mr <- unlist(mr)
  
  tibble(
    what = 'Random\ngene set\n(screen)',
    rank = mr,
    cell_type = ct
  )
}) |> 
  bind_rows()
```

For (3):


```{r}

mrkr_random <- lapply(screen_scrna_ct_map$cell_type, function(ct) {
  fm <- fms[[ct]]
  random_genes <- sample(rownames(sces[[ct]]), N_TOP_VAR)
  rank_random <- sapply(fm, function(f) match(random_genes, rownames(f)))
  
  mr <- data.frame(rank_random)# , row.names = top_var_screen)
  mr <- drop_na(mr)
  mr <- unlist(mr)
  
  tibble(
    what = 'Random\ngene set\n(all)',
    rank = mr,
    cell_type = ct
  )
}) |> 
  bind_rows()
```


```{r}
dfall <- bind_rows(
  mrkr_rank,
  mr_random_screen,
  mrkr_random
) 
```


```{r}
cols <- c('Gene shows high\nsubcluster variability\nin CyTOF screen'='darkred',
          'Random\ngene set\n(screen)' = '#AEC6CF',
          'Random\ngene set\n(all)' = 'grey80')

dfall$what <- factor(dfall$what, levels = names(cols))

dfall |> 
  ggplot(aes(x = what, fill = what, y = rank)) +
  geom_boxplot() +
  scale_fill_manual(values = cols) +
  ggpubr::theme_pubr() +
  labs(x = "Cell type", y = "Marker subcluster rank scRNA-seq") +
  theme(legend.title = element_blank(), axis.text.x = element_blank(),
        legend.position = 'bottom',
        strip.background = element_rect(fill='white'),
        strip.text = element_text(face='bold'),
        axis.ticks.x = element_blank()) +
  facet_wrap(~ cell_type, nrow=1) +
  geom_signif(comparisons = list(names(cols)[c(1,2)], names(cols)[c(1,3)]),
              y_position = c(30000, 35000)) +
  ylim(0, 4e4)
```




```{r}
ggsave(here(glue("figs/screen-vs-scrna.pdf")), width=6, height=4.5)
```

## Save processed expression objects

```{r}
saveRDS(sce_ct, here("data/processed/sce_scrna.rds"))
```



